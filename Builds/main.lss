
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000ca6  00000d3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ca6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080013e  0080013e  00000d78  2**0
                  ALLOC
  3 .stab         00000dec  00000000  00000000  00000d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f6a  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002ace  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a0  00000000  00000000  00002ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000003b6  00000000  00000000  00002b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000064  00000000  00000000  00002f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001fe  00000000  00000000  00002f9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 33       	cpi	r26, 0x3E	; 62
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e3       	ldi	r26, 0x3E	; 62
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 34       	cpi	r26, 0x44	; 68
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 86 01 	call	0x30c	; 0x30c <main>
  9e:	0c 94 51 06 	jmp	0xca2	; 0xca2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <send_uart_char>:
    UCSR0B = (1 << TXEN0);
    UBRR0L = 51;
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

void send_uart_char(unsigned char serial_data, FILE *stream) {
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
    if (serial_data == '\n') { // Send each byte until reached \n character
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <send_uart_char+0xe>
        send_uart_char('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <send_uart_char>
    }
    
    while (!(UCSR0A & (1 << UDRE0)));
  b4:	80 91 c0 00 	lds	r24, 0x00C0
  b8:	85 ff       	sbrs	r24, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <send_uart_char+0xe>
    UDR0 = serial_data;
  bc:	c0 93 c6 00 	sts	0x00C6, r28
}
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <initialize_transmisson>:
     * SCK  _|  |__|  |__
     *      __       ____
     * DATA   |_____|
     *
     */
    data_out;
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	84 b9       	out	0x04, r24	; 4
    data_high;
  c8:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8a e0       	ldi	r24, 0x0A	; 10
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <initialize_transmisson+0x8>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <initialize_transmisson+0xe>
    _delay_us(2);
    sck_high;
  d2:	29 9a       	sbi	0x05, 1	; 5
  d4:	8a e0       	ldi	r24, 0x0A	; 10
  d6:	8a 95       	dec	r24
  d8:	f1 f7       	brne	.-4      	; 0xd6 <initialize_transmisson+0x12>
  da:	00 c0       	rjmp	.+0      	; 0xdc <initialize_transmisson+0x18>
    _delay_us(2);
    data_low;
  dc:	28 98       	cbi	0x05, 0	; 5
  de:	8a e0       	ldi	r24, 0x0A	; 10
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <initialize_transmisson+0x1c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <initialize_transmisson+0x22>
    _delay_us(2);
    sck_low;
  e6:	29 98       	cbi	0x05, 1	; 5
  e8:	8a e2       	ldi	r24, 0x2A	; 42
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <initialize_transmisson+0x26>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <initialize_transmisson+0x2c>
    _delay_us(8);
    sck_high;
  f0:	29 9a       	sbi	0x05, 1	; 5
  f2:	8a e0       	ldi	r24, 0x0A	; 10
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <initialize_transmisson+0x30>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <initialize_transmisson+0x36>
    _delay_us(2);
    data_high;
  fa:	28 9a       	sbi	0x05, 0	; 5
  fc:	8a e0       	ldi	r24, 0x0A	; 10
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <initialize_transmisson+0x3a>
 102:	00 c0       	rjmp	.+0      	; 0x104 <initialize_transmisson+0x40>
    _delay_us(2);
    sck_low;
 104:	29 98       	cbi	0x05, 1	; 5
 106:	08 95       	ret

00000108 <send_command>:
 108:	65 e1       	ldi	r22, 0x15	; 21
 10a:	6a 95       	dec	r22
 10c:	f1 f7       	brne	.-4      	; 0x10a <send_command+0x2>
 10e:	00 00       	nop
}

void send_command(uint8_t command) {
    _delay_us(4);
    data_out;                               // Enable data as output port
 110:	93 e0       	ldi	r25, 0x03	; 3
 112:	94 b9       	out	0x04, r25	; 4
    
    for (int i = 0; i < 8; i++) {
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
        if (0x01 & (command >> (7-i))) {
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	47 e0       	ldi	r20, 0x07	; 7
 11c:	50 e0       	ldi	r21, 0x00	; 0
        sck_high;
        _delay_us(4);
        sck_low;
        
        if (i == 7) {
            data_in;
 11e:	ee ef       	ldi	r30, 0xFE	; 254
 120:	ba 01       	movw	r22, r20
 122:	62 1b       	sub	r22, r18
 124:	73 0b       	sbc	r23, r19
void send_command(uint8_t command) {
    _delay_us(4);
    data_out;                               // Enable data as output port
    
    for (int i = 0; i < 8; i++) {
        if (0x01 & (command >> (7-i))) {
 126:	dc 01       	movw	r26, r24
 128:	02 c0       	rjmp	.+4      	; 0x12e <send_command+0x26>
 12a:	b5 95       	asr	r27
 12c:	a7 95       	ror	r26
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <send_command+0x22>
 132:	a0 ff       	sbrs	r26, 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <send_command+0x32>
            data_high;
 136:	28 9a       	sbi	0x05, 0	; 5
 138:	01 c0       	rjmp	.+2      	; 0x13c <send_command+0x34>
        } else {
            data_low;
 13a:	28 98       	cbi	0x05, 0	; 5
 13c:	b5 e1       	ldi	r27, 0x15	; 21
 13e:	ba 95       	dec	r27
 140:	f1 f7       	brne	.-4      	; 0x13e <send_command+0x36>
 142:	00 00       	nop
        }
        
        _delay_us(4);
        sck_high;
 144:	29 9a       	sbi	0x05, 1	; 5
 146:	65 e1       	ldi	r22, 0x15	; 21
 148:	6a 95       	dec	r22
 14a:	f1 f7       	brne	.-4      	; 0x148 <send_command+0x40>
 14c:	00 00       	nop
        _delay_us(4);
        sck_low;
 14e:	29 98       	cbi	0x05, 1	; 5
        
        if (i == 7) {
 150:	27 30       	cpi	r18, 0x07	; 7
 152:	31 05       	cpc	r19, r1
 154:	81 f0       	breq	.+32     	; 0x176 <send_command+0x6e>

void send_command(uint8_t command) {
    _delay_us(4);
    data_out;                               // Enable data as output port
    
    for (int i = 0; i < 8; i++) {
 156:	2f 5f       	subi	r18, 0xFF	; 255
 158:	3f 4f       	sbci	r19, 0xFF	; 255
 15a:	28 30       	cpi	r18, 0x08	; 8
 15c:	31 05       	cpc	r19, r1
 15e:	01 f7       	brne	.-64     	; 0x120 <send_command+0x18>
 160:	85 e1       	ldi	r24, 0x15	; 21
 162:	8a 95       	dec	r24
 164:	f1 f7       	brne	.-4      	; 0x162 <send_command+0x5a>
 166:	00 00       	nop
            while ((PINB & (1 << DATA)));   // Wait for data line low
        }
    }
    
    _delay_us(4);
    sck_high;
 168:	29 9a       	sbi	0x05, 1	; 5
 16a:	95 e1       	ldi	r25, 0x15	; 21
 16c:	9a 95       	dec	r25
 16e:	f1 f7       	brne	.-4      	; 0x16c <send_command+0x64>
 170:	00 00       	nop
    _delay_us(4);
    sck_low;
 172:	29 98       	cbi	0x05, 1	; 5
 174:	08 95       	ret
        sck_high;
        _delay_us(4);
        sck_low;
        
        if (i == 7) {
            data_in;
 176:	e4 b9       	out	0x04, r30	; 4
            data_high;
 178:	28 9a       	sbi	0x05, 0	; 5
            while ((PINB & (1 << DATA)));   // Wait for data line low
 17a:	18 99       	sbic	0x03, 0	; 3
 17c:	fe cf       	rjmp	.-4      	; 0x17a <send_command+0x72>
 17e:	eb cf       	rjmp	.-42     	; 0x156 <send_command+0x4e>

00000180 <reset>:
    _delay_us(4);
    sck_low;
}

void reset() {
    data_out;
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	84 b9       	out	0x04, r24	; 4
    data_high;
 184:	28 9a       	sbi	0x05, 0	; 5
 186:	89 e0       	ldi	r24, 0x09	; 9
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	25 e1       	ldi	r18, 0x15	; 21
 18c:	2a 95       	dec	r18
 18e:	f1 f7       	brne	.-4      	; 0x18c <reset+0xc>
 190:	00 00       	nop
    
    for (int i = 0; i < 9; i++) {
        _delay_us(4);
        sck_high;
 192:	29 9a       	sbi	0x05, 1	; 5
 194:	25 e1       	ldi	r18, 0x15	; 21
 196:	2a 95       	dec	r18
 198:	f1 f7       	brne	.-4      	; 0x196 <reset+0x16>
 19a:	00 00       	nop
        _delay_us(4);
        sck_low;
 19c:	29 98       	cbi	0x05, 1	; 5
 19e:	01 97       	sbiw	r24, 0x01	; 1

void reset() {
    data_out;
    data_high;
    
    for (int i = 0; i < 9; i++) {
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	99 f7       	brne	.-26     	; 0x18a <reset+0xa>
        _delay_us(4);
        sck_high;
        _delay_us(4);
        sck_low;
    }
    initialize_transmisson();
 1a4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <initialize_transmisson>

000001a8 <calculateMeasuredData>:
    
    measured = (dataH << 8) | dataL;
    return measured;
}

float calculateMeasuredData(uint16_t measuredData, uint8_t value) {
 1a8:	8f 92       	push	r8
 1aa:	9f 92       	push	r9
 1ac:	af 92       	push	r10
 1ae:	bf 92       	push	r11
 1b0:	cf 92       	push	r12
 1b2:	df 92       	push	r13
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
    float humiLin, tempLin;
    
    switch (value) {
 1b8:	63 30       	cpi	r22, 0x03	; 3
 1ba:	41 f1       	breq	.+80     	; 0x20c <calculateMeasuredData+0x64>
 1bc:	65 30       	cpi	r22, 0x05	; 5
 1be:	c1 f5       	brne	.+112    	; 0x230 <calculateMeasuredData+0x88>
        case humidity:
            humiLin = measuredData * 0.0405 - 2.8 * pow(10, -6) * pow(measuredData, 2) - 4;
 1c0:	bc 01       	movw	r22, r24
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 9d 02 	call	0x53a	; 0x53a <__floatunsisf>
 1ca:	6b 01       	movw	r12, r22
 1cc:	7c 01       	movw	r14, r24
 1ce:	24 e5       	ldi	r18, 0x54	; 84
 1d0:	33 ee       	ldi	r19, 0xE3	; 227
 1d2:	45 e2       	ldi	r20, 0x25	; 37
 1d4:	5d e3       	ldi	r21, 0x3D	; 61
 1d6:	0e 94 2b 03 	call	0x656	; 0x656 <__mulsf3>
 1da:	4b 01       	movw	r8, r22
 1dc:	5c 01       	movw	r10, r24
 1de:	a7 01       	movw	r20, r14
 1e0:	96 01       	movw	r18, r12
 1e2:	c7 01       	movw	r24, r14
 1e4:	b6 01       	movw	r22, r12
 1e6:	0e 94 2b 03 	call	0x656	; 0x656 <__mulsf3>
 1ea:	22 ea       	ldi	r18, 0xA2	; 162
 1ec:	37 ee       	ldi	r19, 0xE7	; 231
 1ee:	4b e3       	ldi	r20, 0x3B	; 59
 1f0:	56 e3       	ldi	r21, 0x36	; 54
 1f2:	0e 94 2b 03 	call	0x656	; 0x656 <__mulsf3>
 1f6:	9b 01       	movw	r18, r22
 1f8:	ac 01       	movw	r20, r24
 1fa:	c5 01       	movw	r24, r10
 1fc:	b4 01       	movw	r22, r8
 1fe:	0e 94 38 02 	call	0x470	; 0x470 <__subsf3>
 202:	20 e0       	ldi	r18, 0x00	; 0
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	40 e8       	ldi	r20, 0x80	; 128
 208:	50 e4       	ldi	r21, 0x40	; 64
 20a:	0f c0       	rjmp	.+30     	; 0x22a <calculateMeasuredData+0x82>
            return humiLin;
            break;
        case temperature:
            tempLin = -40.00 + 0.01 * measuredData;
 20c:	bc 01       	movw	r22, r24
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 9d 02 	call	0x53a	; 0x53a <__floatunsisf>
 216:	2a e0       	ldi	r18, 0x0A	; 10
 218:	37 ed       	ldi	r19, 0xD7	; 215
 21a:	43 e2       	ldi	r20, 0x23	; 35
 21c:	5c e3       	ldi	r21, 0x3C	; 60
 21e:	0e 94 2b 03 	call	0x656	; 0x656 <__mulsf3>
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	40 e2       	ldi	r20, 0x20	; 32
 228:	52 e4       	ldi	r21, 0x42	; 66
 22a:	0e 94 38 02 	call	0x470	; 0x470 <__subsf3>
            return tempLin;
 22e:	04 c0       	rjmp	.+8      	; 0x238 <calculateMeasuredData+0x90>
            break;
    }
    
    return 1;
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	9f e3       	ldi	r25, 0x3F	; 63
}
 238:	ff 90       	pop	r15
 23a:	ef 90       	pop	r14
 23c:	df 90       	pop	r13
 23e:	cf 90       	pop	r12
 240:	bf 90       	pop	r11
 242:	af 90       	pop	r10
 244:	9f 90       	pop	r9
 246:	8f 90       	pop	r8
 248:	08 95       	ret

0000024a <serial_init>:
     * Initialize UART,
     * 8 bit frame, 1 Stop Bit
     * No Parity
     *
     */
    UCSR0B = (1 << TXEN0);
 24a:	88 e0       	ldi	r24, 0x08	; 8
 24c:	80 93 c1 00 	sts	0x00C1, r24
    UBRR0L = 51;
 250:	83 e3       	ldi	r24, 0x33	; 51
 252:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 256:	86 e0       	ldi	r24, 0x06	; 6
 258:	80 93 c2 00 	sts	0x00C2, r24
 25c:	08 95       	ret

0000025e <receiveBytes>:
    
    while (!(UCSR0A & (1 << UDRE0)));
    UDR0 = serial_data;
}

void receiveBytes(uint8_t *target) {
 25e:	fc 01       	movw	r30, r24
 260:	27 e0       	ldi	r18, 0x07	; 7
 262:	30 e0       	ldi	r19, 0x00	; 0
        sck_high;
        _delay_us(4);
        if ((PINB & (1 << PINB0))) {
            *target |= (1 << (7 - i));
        } else {
            *target &= ~(1 << (7 - i));
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
    UDR0 = serial_data;
}

void receiveBytes(uint8_t *target) {
    for (int i = 0; i < 8; i++) {
        sck_high;
 268:	29 9a       	sbi	0x05, 1	; 5
 26a:	45 e1       	ldi	r20, 0x15	; 21
 26c:	4a 95       	dec	r20
 26e:	f1 f7       	brne	.-4      	; 0x26c <receiveBytes+0xe>
 270:	00 00       	nop
 272:	60 81       	ld	r22, Z
        _delay_us(4);
        if ((PINB & (1 << PINB0))) {
            *target |= (1 << (7 - i));
 274:	ac 01       	movw	r20, r24
 276:	02 2e       	mov	r0, r18
 278:	01 c0       	rjmp	.+2      	; 0x27c <receiveBytes+0x1e>
 27a:	44 0f       	add	r20, r20
 27c:	0a 94       	dec	r0
 27e:	ea f7       	brpl	.-6      	; 0x27a <receiveBytes+0x1c>

void receiveBytes(uint8_t *target) {
    for (int i = 0; i < 8; i++) {
        sck_high;
        _delay_us(4);
        if ((PINB & (1 << PINB0))) {
 280:	18 9b       	sbis	0x03, 0	; 3
 282:	02 c0       	rjmp	.+4      	; 0x288 <receiveBytes+0x2a>
            *target |= (1 << (7 - i));
 284:	46 2b       	or	r20, r22
 286:	02 c0       	rjmp	.+4      	; 0x28c <receiveBytes+0x2e>
        } else {
            *target &= ~(1 << (7 - i));
 288:	40 95       	com	r20
 28a:	46 23       	and	r20, r22
 28c:	40 83       	st	Z, r20
        }
        sck_low;
 28e:	29 98       	cbi	0x05, 1	; 5
 290:	45 e1       	ldi	r20, 0x15	; 21
 292:	4a 95       	dec	r20
 294:	f1 f7       	brne	.-4      	; 0x292 <receiveBytes+0x34>
 296:	00 00       	nop
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	31 09       	sbc	r19, r1
 29c:	28 f7       	brcc	.-54     	; 0x268 <receiveBytes+0xa>
        _delay_us(4);
    }
}
 29e:	08 95       	ret

000002a0 <ack>:

void ack(void) {
    data_out;
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	84 b9       	out	0x04, r24	; 4
    data_low;
 2a4:	28 98       	cbi	0x05, 0	; 5
 2a6:	85 e1       	ldi	r24, 0x15	; 21
 2a8:	8a 95       	dec	r24
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <ack+0x8>
 2ac:	00 00       	nop
    _delay_us(4);
    sck_high;
 2ae:	29 9a       	sbi	0x05, 1	; 5
 2b0:	85 e1       	ldi	r24, 0x15	; 21
 2b2:	8a 95       	dec	r24
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <ack+0x12>
 2b6:	00 00       	nop
    _delay_us(4);
    sck_low;
 2b8:	29 98       	cbi	0x05, 1	; 5
 2ba:	85 e1       	ldi	r24, 0x15	; 21
 2bc:	8a 95       	dec	r24
 2be:	f1 f7       	brne	.-4      	; 0x2bc <ack+0x1c>
 2c0:	00 00       	nop
    _delay_us(4);
    data_in;
 2c2:	8e ef       	ldi	r24, 0xFE	; 254
 2c4:	84 b9       	out	0x04, r24	; 4
    data_high;
 2c6:	28 9a       	sbi	0x05, 0	; 5
 2c8:	08 95       	ret

000002ca <read_data>:
    initialize_transmisson();
}



uint16_t read_data() {
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	00 d0       	rcall	.+0      	; 0x2d0 <read_data+0x6>
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
    uint8_t dataL, dataH;
    uint16_t measured;
    dataL = 0x00;
 2d4:	1a 82       	std	Y+2, r1	; 0x02
    dataH = 0x00;
 2d6:	19 82       	std	Y+1, r1	; 0x01
    data_in;
 2d8:	8e ef       	ldi	r24, 0xFE	; 254
 2da:	84 b9       	out	0x04, r24	; 4
    data_high;
 2dc:	28 9a       	sbi	0x05, 0	; 5
    
    while (PINB & (1<<DATA));
 2de:	18 99       	sbic	0x03, 0	; 3
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <read_data+0x14>
    //Start receiving MSB
    receiveBytes(&dataH);
 2e2:	ce 01       	movw	r24, r28
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	0e 94 2f 01 	call	0x25e	; 0x25e <receiveBytes>
    ack(); // ack() to start getting LSB
 2ea:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ack>
    //Start receiving LSB
    receiveBytes(&dataL);
 2ee:	ce 01       	movw	r24, r28
 2f0:	02 96       	adiw	r24, 0x02	; 2
 2f2:	0e 94 2f 01 	call	0x25e	; 0x25e <receiveBytes>
    
    measured = (dataH << 8) | dataL;
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	98 2f       	mov	r25, r24
 2fc:	88 27       	eor	r24, r24
 2fe:	2a 81       	ldd	r18, Y+2	; 0x02
    return measured;
}
 300:	82 2b       	or	r24, r18
 302:	0f 90       	pop	r0
 304:	0f 90       	pop	r0
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <main>:
 30c:	2a e3       	ldi	r18, 0x3A	; 58
 30e:	2a 95       	dec	r18
 310:	f1 f7       	brne	.-4      	; 0x30e <main+0x2>
 312:	00 c0       	rjmp	.+0      	; 0x314 <main+0x8>
    float humidity_data, humidity_data_com, temperature_data;
    uint16_t humidityLin;
    
    _delay_us(11);                  // Wait for sensor initialization
    
    serial_init();
 314:	0e 94 25 01 	call	0x24a	; 0x24a <serial_init>
    stdout = &uart_output;
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	90 93 41 01 	sts	0x0141, r25
 320:	80 93 40 01 	sts	0x0140, r24
        send_command(humidity);
        _delay_us(80);
        humidityLin = read_data();
        humidity_data = calculateMeasuredData(humidityLin, humidity);
        humidity_data_com = (temperature_data - 25) * (0.01 + 0.00008 * humidityLin) + humidity_data;
        printf("Humidity: %.2f (Compansated: %.2f) Temp: %.2f \n",
 324:	ce e0       	ldi	r28, 0x0E	; 14
 326:	d1 e0       	ldi	r29, 0x01	; 1
    
    serial_init();
    stdout = &uart_output;
    
    while (1) {
        initialize_transmisson();   // Initilize the sensor to send command
 328:	0e 94 62 00 	call	0xc4	; 0xc4 <initialize_transmisson>
        send_command(temperature);
 32c:	83 e0       	ldi	r24, 0x03	; 3
 32e:	0e 94 84 00 	call	0x108	; 0x108 <send_command>
 332:	8f e3       	ldi	r24, 0x3F	; 63
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <main+0x2a>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <main+0x30>
 33c:	00 00       	nop
        _delay_us(80);              // Wait for measurement to complete
        temperature_data = calculateMeasuredData(read_data(), temperature);
 33e:	0e 94 65 01 	call	0x2ca	; 0x2ca <read_data>
        case humidity:
            humiLin = measuredData * 0.0405 - 2.8 * pow(10, -6) * pow(measuredData, 2) - 4;
            return humiLin;
            break;
        case temperature:
            tempLin = -40.00 + 0.01 * measuredData;
 342:	bc 01       	movw	r22, r24
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 9d 02 	call	0x53a	; 0x53a <__floatunsisf>
 34c:	2a e0       	ldi	r18, 0x0A	; 10
 34e:	37 ed       	ldi	r19, 0xD7	; 215
 350:	43 e2       	ldi	r20, 0x23	; 35
 352:	5c e3       	ldi	r21, 0x3C	; 60
 354:	0e 94 2b 03 	call	0x656	; 0x656 <__mulsf3>
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	40 e2       	ldi	r20, 0x20	; 32
 35e:	52 e4       	ldi	r21, 0x42	; 66
 360:	0e 94 38 02 	call	0x470	; 0x470 <__subsf3>
 364:	1b 01       	movw	r2, r22
 366:	2c 01       	movw	r4, r24
        reset();
 368:	0e 94 c0 00 	call	0x180	; 0x180 <reset>
        send_command(humidity);
 36c:	85 e0       	ldi	r24, 0x05	; 5
 36e:	0e 94 84 00 	call	0x108	; 0x108 <send_command>
 372:	8f e3       	ldi	r24, 0x3F	; 63
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <main+0x6a>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0x70>
 37c:	00 00       	nop
        _delay_us(80);
        humidityLin = read_data();
 37e:	0e 94 65 01 	call	0x2ca	; 0x2ca <read_data>
float calculateMeasuredData(uint16_t measuredData, uint8_t value) {
    float humiLin, tempLin;
    
    switch (value) {
        case humidity:
            humiLin = measuredData * 0.0405 - 2.8 * pow(10, -6) * pow(measuredData, 2) - 4;
 382:	bc 01       	movw	r22, r24
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 9d 02 	call	0x53a	; 0x53a <__floatunsisf>
 38c:	4b 01       	movw	r8, r22
 38e:	5c 01       	movw	r10, r24
 390:	24 e5       	ldi	r18, 0x54	; 84
 392:	33 ee       	ldi	r19, 0xE3	; 227
 394:	45 e2       	ldi	r20, 0x25	; 37
 396:	5d e3       	ldi	r21, 0x3D	; 61
 398:	0e 94 2b 03 	call	0x656	; 0x656 <__mulsf3>
 39c:	6b 01       	movw	r12, r22
 39e:	7c 01       	movw	r14, r24
 3a0:	a5 01       	movw	r20, r10
 3a2:	94 01       	movw	r18, r8
 3a4:	c5 01       	movw	r24, r10
 3a6:	b4 01       	movw	r22, r8
 3a8:	0e 94 2b 03 	call	0x656	; 0x656 <__mulsf3>
 3ac:	22 ea       	ldi	r18, 0xA2	; 162
 3ae:	37 ee       	ldi	r19, 0xE7	; 231
 3b0:	4b e3       	ldi	r20, 0x3B	; 59
 3b2:	56 e3       	ldi	r21, 0x36	; 54
 3b4:	0e 94 2b 03 	call	0x656	; 0x656 <__mulsf3>
 3b8:	9b 01       	movw	r18, r22
 3ba:	ac 01       	movw	r20, r24
 3bc:	c7 01       	movw	r24, r14
 3be:	b6 01       	movw	r22, r12
 3c0:	0e 94 38 02 	call	0x470	; 0x470 <__subsf3>
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	40 e8       	ldi	r20, 0x80	; 128
 3ca:	50 e4       	ldi	r21, 0x40	; 64
 3cc:	0e 94 38 02 	call	0x470	; 0x470 <__subsf3>
 3d0:	16 2f       	mov	r17, r22
 3d2:	07 2f       	mov	r16, r23
 3d4:	78 2e       	mov	r7, r24
 3d6:	69 2e       	mov	r6, r25
        humidity_data = calculateMeasuredData(humidityLin, humidity);
        humidity_data_com = (temperature_data - 25) * (0.01 + 0.00008 * humidityLin) + humidity_data;
        printf("Humidity: %.2f (Compansated: %.2f) Temp: %.2f \n",
 3d8:	5f 92       	push	r5
 3da:	4f 92       	push	r4
 3dc:	3f 92       	push	r3
 3de:	2f 92       	push	r2
        reset();
        send_command(humidity);
        _delay_us(80);
        humidityLin = read_data();
        humidity_data = calculateMeasuredData(humidityLin, humidity);
        humidity_data_com = (temperature_data - 25) * (0.01 + 0.00008 * humidityLin) + humidity_data;
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	48 ec       	ldi	r20, 0xC8	; 200
 3e6:	51 e4       	ldi	r21, 0x41	; 65
 3e8:	62 2d       	mov	r22, r2
 3ea:	73 2d       	mov	r23, r3
 3ec:	84 2d       	mov	r24, r4
 3ee:	95 2d       	mov	r25, r5
 3f0:	0e 94 38 02 	call	0x470	; 0x470 <__subsf3>
 3f4:	6b 01       	movw	r12, r22
 3f6:	7c 01       	movw	r14, r24
 3f8:	2c ea       	ldi	r18, 0xAC	; 172
 3fa:	35 ec       	ldi	r19, 0xC5	; 197
 3fc:	47 ea       	ldi	r20, 0xA7	; 167
 3fe:	58 e3       	ldi	r21, 0x38	; 56
 400:	c5 01       	movw	r24, r10
 402:	b4 01       	movw	r22, r8
 404:	0e 94 2b 03 	call	0x656	; 0x656 <__mulsf3>
 408:	2a e0       	ldi	r18, 0x0A	; 10
 40a:	37 ed       	ldi	r19, 0xD7	; 215
 40c:	43 e2       	ldi	r20, 0x23	; 35
 40e:	5c e3       	ldi	r21, 0x3C	; 60
 410:	0e 94 39 02 	call	0x472	; 0x472 <__addsf3>
 414:	9b 01       	movw	r18, r22
 416:	ac 01       	movw	r20, r24
 418:	c7 01       	movw	r24, r14
 41a:	b6 01       	movw	r22, r12
 41c:	0e 94 2b 03 	call	0x656	; 0x656 <__mulsf3>
 420:	d8 01       	movw	r26, r16
 422:	f3 01       	movw	r30, r6
 424:	2b 2f       	mov	r18, r27
 426:	3a 2f       	mov	r19, r26
 428:	4f 2f       	mov	r20, r31
 42a:	5e 2f       	mov	r21, r30
 42c:	0e 94 39 02 	call	0x472	; 0x472 <__addsf3>
        printf("Humidity: %.2f (Compansated: %.2f) Temp: %.2f \n",
 430:	9f 93       	push	r25
 432:	8f 93       	push	r24
 434:	7f 93       	push	r23
 436:	6f 93       	push	r22
 438:	6f 92       	push	r6
 43a:	7f 92       	push	r7
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	df 93       	push	r29
 442:	cf 93       	push	r28
 444:	0e 94 8e 03 	call	0x71c	; 0x71c <printf>
               (double)humidity_data, (double)humidity_data_com, (double)temperature_data);
        reset();
 448:	0e 94 c0 00 	call	0x180	; 0x180 <reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 44c:	8f ef       	ldi	r24, 0xFF	; 255
 44e:	93 ed       	ldi	r25, 0xD3	; 211
 450:	20 e3       	ldi	r18, 0x30	; 48
 452:	81 50       	subi	r24, 0x01	; 1
 454:	90 40       	sbci	r25, 0x00	; 0
 456:	20 40       	sbci	r18, 0x00	; 0
 458:	e1 f7       	brne	.-8      	; 0x452 <main+0x146>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <main+0x150>
 45c:	00 00       	nop
 45e:	8d b7       	in	r24, 0x3d	; 61
 460:	9e b7       	in	r25, 0x3e	; 62
 462:	0e 96       	adiw	r24, 0x0e	; 14
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	f8 94       	cli
 468:	9e bf       	out	0x3e, r25	; 62
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	8d bf       	out	0x3d, r24	; 61
 46e:	5c cf       	rjmp	.-328    	; 0x328 <main+0x1c>

00000470 <__subsf3>:
 470:	50 58       	subi	r21, 0x80	; 128

00000472 <__addsf3>:
 472:	bb 27       	eor	r27, r27
 474:	aa 27       	eor	r26, r26
 476:	0e d0       	rcall	.+28     	; 0x494 <__addsf3x>
 478:	b4 c0       	rjmp	.+360    	; 0x5e2 <__fp_round>
 47a:	a5 d0       	rcall	.+330    	; 0x5c6 <__fp_pscA>
 47c:	30 f0       	brcs	.+12     	; 0x48a <__addsf3+0x18>
 47e:	aa d0       	rcall	.+340    	; 0x5d4 <__fp_pscB>
 480:	20 f0       	brcs	.+8      	; 0x48a <__addsf3+0x18>
 482:	31 f4       	brne	.+12     	; 0x490 <__addsf3+0x1e>
 484:	9f 3f       	cpi	r25, 0xFF	; 255
 486:	11 f4       	brne	.+4      	; 0x48c <__addsf3+0x1a>
 488:	1e f4       	brtc	.+6      	; 0x490 <__addsf3+0x1e>
 48a:	9a c0       	rjmp	.+308    	; 0x5c0 <__fp_nan>
 48c:	0e f4       	brtc	.+2      	; 0x490 <__addsf3+0x1e>
 48e:	e0 95       	com	r30
 490:	e7 fb       	bst	r30, 7
 492:	90 c0       	rjmp	.+288    	; 0x5b4 <__fp_inf>

00000494 <__addsf3x>:
 494:	e9 2f       	mov	r30, r25
 496:	b6 d0       	rcall	.+364    	; 0x604 <__fp_split3>
 498:	80 f3       	brcs	.-32     	; 0x47a <__addsf3+0x8>
 49a:	ba 17       	cp	r27, r26
 49c:	62 07       	cpc	r22, r18
 49e:	73 07       	cpc	r23, r19
 4a0:	84 07       	cpc	r24, r20
 4a2:	95 07       	cpc	r25, r21
 4a4:	18 f0       	brcs	.+6      	; 0x4ac <__addsf3x+0x18>
 4a6:	71 f4       	brne	.+28     	; 0x4c4 <__addsf3x+0x30>
 4a8:	9e f5       	brtc	.+102    	; 0x510 <__addsf3x+0x7c>
 4aa:	ce c0       	rjmp	.+412    	; 0x648 <__fp_zero>
 4ac:	0e f4       	brtc	.+2      	; 0x4b0 <__addsf3x+0x1c>
 4ae:	e0 95       	com	r30
 4b0:	0b 2e       	mov	r0, r27
 4b2:	ba 2f       	mov	r27, r26
 4b4:	a0 2d       	mov	r26, r0
 4b6:	0b 01       	movw	r0, r22
 4b8:	b9 01       	movw	r22, r18
 4ba:	90 01       	movw	r18, r0
 4bc:	0c 01       	movw	r0, r24
 4be:	ca 01       	movw	r24, r20
 4c0:	a0 01       	movw	r20, r0
 4c2:	11 24       	eor	r1, r1
 4c4:	ff 27       	eor	r31, r31
 4c6:	59 1b       	sub	r21, r25
 4c8:	99 f0       	breq	.+38     	; 0x4f0 <__addsf3x+0x5c>
 4ca:	59 3f       	cpi	r21, 0xF9	; 249
 4cc:	50 f4       	brcc	.+20     	; 0x4e2 <__addsf3x+0x4e>
 4ce:	50 3e       	cpi	r21, 0xE0	; 224
 4d0:	68 f1       	brcs	.+90     	; 0x52c <__addsf3x+0x98>
 4d2:	1a 16       	cp	r1, r26
 4d4:	f0 40       	sbci	r31, 0x00	; 0
 4d6:	a2 2f       	mov	r26, r18
 4d8:	23 2f       	mov	r18, r19
 4da:	34 2f       	mov	r19, r20
 4dc:	44 27       	eor	r20, r20
 4de:	58 5f       	subi	r21, 0xF8	; 248
 4e0:	f3 cf       	rjmp	.-26     	; 0x4c8 <__addsf3x+0x34>
 4e2:	46 95       	lsr	r20
 4e4:	37 95       	ror	r19
 4e6:	27 95       	ror	r18
 4e8:	a7 95       	ror	r26
 4ea:	f0 40       	sbci	r31, 0x00	; 0
 4ec:	53 95       	inc	r21
 4ee:	c9 f7       	brne	.-14     	; 0x4e2 <__addsf3x+0x4e>
 4f0:	7e f4       	brtc	.+30     	; 0x510 <__addsf3x+0x7c>
 4f2:	1f 16       	cp	r1, r31
 4f4:	ba 0b       	sbc	r27, r26
 4f6:	62 0b       	sbc	r22, r18
 4f8:	73 0b       	sbc	r23, r19
 4fa:	84 0b       	sbc	r24, r20
 4fc:	ba f0       	brmi	.+46     	; 0x52c <__addsf3x+0x98>
 4fe:	91 50       	subi	r25, 0x01	; 1
 500:	a1 f0       	breq	.+40     	; 0x52a <__addsf3x+0x96>
 502:	ff 0f       	add	r31, r31
 504:	bb 1f       	adc	r27, r27
 506:	66 1f       	adc	r22, r22
 508:	77 1f       	adc	r23, r23
 50a:	88 1f       	adc	r24, r24
 50c:	c2 f7       	brpl	.-16     	; 0x4fe <__addsf3x+0x6a>
 50e:	0e c0       	rjmp	.+28     	; 0x52c <__addsf3x+0x98>
 510:	ba 0f       	add	r27, r26
 512:	62 1f       	adc	r22, r18
 514:	73 1f       	adc	r23, r19
 516:	84 1f       	adc	r24, r20
 518:	48 f4       	brcc	.+18     	; 0x52c <__addsf3x+0x98>
 51a:	87 95       	ror	r24
 51c:	77 95       	ror	r23
 51e:	67 95       	ror	r22
 520:	b7 95       	ror	r27
 522:	f7 95       	ror	r31
 524:	9e 3f       	cpi	r25, 0xFE	; 254
 526:	08 f0       	brcs	.+2      	; 0x52a <__addsf3x+0x96>
 528:	b3 cf       	rjmp	.-154    	; 0x490 <__addsf3+0x1e>
 52a:	93 95       	inc	r25
 52c:	88 0f       	add	r24, r24
 52e:	08 f0       	brcs	.+2      	; 0x532 <__addsf3x+0x9e>
 530:	99 27       	eor	r25, r25
 532:	ee 0f       	add	r30, r30
 534:	97 95       	ror	r25
 536:	87 95       	ror	r24
 538:	08 95       	ret

0000053a <__floatunsisf>:
 53a:	e8 94       	clt
 53c:	09 c0       	rjmp	.+18     	; 0x550 <__floatsisf+0x12>

0000053e <__floatsisf>:
 53e:	97 fb       	bst	r25, 7
 540:	3e f4       	brtc	.+14     	; 0x550 <__floatsisf+0x12>
 542:	90 95       	com	r25
 544:	80 95       	com	r24
 546:	70 95       	com	r23
 548:	61 95       	neg	r22
 54a:	7f 4f       	sbci	r23, 0xFF	; 255
 54c:	8f 4f       	sbci	r24, 0xFF	; 255
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	99 23       	and	r25, r25
 552:	a9 f0       	breq	.+42     	; 0x57e <__floatsisf+0x40>
 554:	f9 2f       	mov	r31, r25
 556:	96 e9       	ldi	r25, 0x96	; 150
 558:	bb 27       	eor	r27, r27
 55a:	93 95       	inc	r25
 55c:	f6 95       	lsr	r31
 55e:	87 95       	ror	r24
 560:	77 95       	ror	r23
 562:	67 95       	ror	r22
 564:	b7 95       	ror	r27
 566:	f1 11       	cpse	r31, r1
 568:	f8 cf       	rjmp	.-16     	; 0x55a <__floatsisf+0x1c>
 56a:	fa f4       	brpl	.+62     	; 0x5aa <__floatsisf+0x6c>
 56c:	bb 0f       	add	r27, r27
 56e:	11 f4       	brne	.+4      	; 0x574 <__floatsisf+0x36>
 570:	60 ff       	sbrs	r22, 0
 572:	1b c0       	rjmp	.+54     	; 0x5aa <__floatsisf+0x6c>
 574:	6f 5f       	subi	r22, 0xFF	; 255
 576:	7f 4f       	sbci	r23, 0xFF	; 255
 578:	8f 4f       	sbci	r24, 0xFF	; 255
 57a:	9f 4f       	sbci	r25, 0xFF	; 255
 57c:	16 c0       	rjmp	.+44     	; 0x5aa <__floatsisf+0x6c>
 57e:	88 23       	and	r24, r24
 580:	11 f0       	breq	.+4      	; 0x586 <__floatsisf+0x48>
 582:	96 e9       	ldi	r25, 0x96	; 150
 584:	11 c0       	rjmp	.+34     	; 0x5a8 <__floatsisf+0x6a>
 586:	77 23       	and	r23, r23
 588:	21 f0       	breq	.+8      	; 0x592 <__floatsisf+0x54>
 58a:	9e e8       	ldi	r25, 0x8E	; 142
 58c:	87 2f       	mov	r24, r23
 58e:	76 2f       	mov	r23, r22
 590:	05 c0       	rjmp	.+10     	; 0x59c <__floatsisf+0x5e>
 592:	66 23       	and	r22, r22
 594:	71 f0       	breq	.+28     	; 0x5b2 <__floatsisf+0x74>
 596:	96 e8       	ldi	r25, 0x86	; 134
 598:	86 2f       	mov	r24, r22
 59a:	70 e0       	ldi	r23, 0x00	; 0
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	2a f0       	brmi	.+10     	; 0x5aa <__floatsisf+0x6c>
 5a0:	9a 95       	dec	r25
 5a2:	66 0f       	add	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	88 1f       	adc	r24, r24
 5a8:	da f7       	brpl	.-10     	; 0x5a0 <__floatsisf+0x62>
 5aa:	88 0f       	add	r24, r24
 5ac:	96 95       	lsr	r25
 5ae:	87 95       	ror	r24
 5b0:	97 f9       	bld	r25, 7
 5b2:	08 95       	ret

000005b4 <__fp_inf>:
 5b4:	97 f9       	bld	r25, 7
 5b6:	9f 67       	ori	r25, 0x7F	; 127
 5b8:	80 e8       	ldi	r24, 0x80	; 128
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	60 e0       	ldi	r22, 0x00	; 0
 5be:	08 95       	ret

000005c0 <__fp_nan>:
 5c0:	9f ef       	ldi	r25, 0xFF	; 255
 5c2:	80 ec       	ldi	r24, 0xC0	; 192
 5c4:	08 95       	ret

000005c6 <__fp_pscA>:
 5c6:	00 24       	eor	r0, r0
 5c8:	0a 94       	dec	r0
 5ca:	16 16       	cp	r1, r22
 5cc:	17 06       	cpc	r1, r23
 5ce:	18 06       	cpc	r1, r24
 5d0:	09 06       	cpc	r0, r25
 5d2:	08 95       	ret

000005d4 <__fp_pscB>:
 5d4:	00 24       	eor	r0, r0
 5d6:	0a 94       	dec	r0
 5d8:	12 16       	cp	r1, r18
 5da:	13 06       	cpc	r1, r19
 5dc:	14 06       	cpc	r1, r20
 5de:	05 06       	cpc	r0, r21
 5e0:	08 95       	ret

000005e2 <__fp_round>:
 5e2:	09 2e       	mov	r0, r25
 5e4:	03 94       	inc	r0
 5e6:	00 0c       	add	r0, r0
 5e8:	11 f4       	brne	.+4      	; 0x5ee <__fp_round+0xc>
 5ea:	88 23       	and	r24, r24
 5ec:	52 f0       	brmi	.+20     	; 0x602 <__fp_round+0x20>
 5ee:	bb 0f       	add	r27, r27
 5f0:	40 f4       	brcc	.+16     	; 0x602 <__fp_round+0x20>
 5f2:	bf 2b       	or	r27, r31
 5f4:	11 f4       	brne	.+4      	; 0x5fa <__fp_round+0x18>
 5f6:	60 ff       	sbrs	r22, 0
 5f8:	04 c0       	rjmp	.+8      	; 0x602 <__fp_round+0x20>
 5fa:	6f 5f       	subi	r22, 0xFF	; 255
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255
 5fe:	8f 4f       	sbci	r24, 0xFF	; 255
 600:	9f 4f       	sbci	r25, 0xFF	; 255
 602:	08 95       	ret

00000604 <__fp_split3>:
 604:	57 fd       	sbrc	r21, 7
 606:	90 58       	subi	r25, 0x80	; 128
 608:	44 0f       	add	r20, r20
 60a:	55 1f       	adc	r21, r21
 60c:	59 f0       	breq	.+22     	; 0x624 <__fp_splitA+0x10>
 60e:	5f 3f       	cpi	r21, 0xFF	; 255
 610:	71 f0       	breq	.+28     	; 0x62e <__fp_splitA+0x1a>
 612:	47 95       	ror	r20

00000614 <__fp_splitA>:
 614:	88 0f       	add	r24, r24
 616:	97 fb       	bst	r25, 7
 618:	99 1f       	adc	r25, r25
 61a:	61 f0       	breq	.+24     	; 0x634 <__fp_splitA+0x20>
 61c:	9f 3f       	cpi	r25, 0xFF	; 255
 61e:	79 f0       	breq	.+30     	; 0x63e <__fp_splitA+0x2a>
 620:	87 95       	ror	r24
 622:	08 95       	ret
 624:	12 16       	cp	r1, r18
 626:	13 06       	cpc	r1, r19
 628:	14 06       	cpc	r1, r20
 62a:	55 1f       	adc	r21, r21
 62c:	f2 cf       	rjmp	.-28     	; 0x612 <__fp_split3+0xe>
 62e:	46 95       	lsr	r20
 630:	f1 df       	rcall	.-30     	; 0x614 <__fp_splitA>
 632:	08 c0       	rjmp	.+16     	; 0x644 <__fp_splitA+0x30>
 634:	16 16       	cp	r1, r22
 636:	17 06       	cpc	r1, r23
 638:	18 06       	cpc	r1, r24
 63a:	99 1f       	adc	r25, r25
 63c:	f1 cf       	rjmp	.-30     	; 0x620 <__fp_splitA+0xc>
 63e:	86 95       	lsr	r24
 640:	71 05       	cpc	r23, r1
 642:	61 05       	cpc	r22, r1
 644:	08 94       	sec
 646:	08 95       	ret

00000648 <__fp_zero>:
 648:	e8 94       	clt

0000064a <__fp_szero>:
 64a:	bb 27       	eor	r27, r27
 64c:	66 27       	eor	r22, r22
 64e:	77 27       	eor	r23, r23
 650:	cb 01       	movw	r24, r22
 652:	97 f9       	bld	r25, 7
 654:	08 95       	ret

00000656 <__mulsf3>:
 656:	0b d0       	rcall	.+22     	; 0x66e <__mulsf3x>
 658:	c4 cf       	rjmp	.-120    	; 0x5e2 <__fp_round>
 65a:	b5 df       	rcall	.-150    	; 0x5c6 <__fp_pscA>
 65c:	28 f0       	brcs	.+10     	; 0x668 <__mulsf3+0x12>
 65e:	ba df       	rcall	.-140    	; 0x5d4 <__fp_pscB>
 660:	18 f0       	brcs	.+6      	; 0x668 <__mulsf3+0x12>
 662:	95 23       	and	r25, r21
 664:	09 f0       	breq	.+2      	; 0x668 <__mulsf3+0x12>
 666:	a6 cf       	rjmp	.-180    	; 0x5b4 <__fp_inf>
 668:	ab cf       	rjmp	.-170    	; 0x5c0 <__fp_nan>
 66a:	11 24       	eor	r1, r1
 66c:	ee cf       	rjmp	.-36     	; 0x64a <__fp_szero>

0000066e <__mulsf3x>:
 66e:	ca df       	rcall	.-108    	; 0x604 <__fp_split3>
 670:	a0 f3       	brcs	.-24     	; 0x65a <__mulsf3+0x4>

00000672 <__mulsf3_pse>:
 672:	95 9f       	mul	r25, r21
 674:	d1 f3       	breq	.-12     	; 0x66a <__mulsf3+0x14>
 676:	95 0f       	add	r25, r21
 678:	50 e0       	ldi	r21, 0x00	; 0
 67a:	55 1f       	adc	r21, r21
 67c:	62 9f       	mul	r22, r18
 67e:	f0 01       	movw	r30, r0
 680:	72 9f       	mul	r23, r18
 682:	bb 27       	eor	r27, r27
 684:	f0 0d       	add	r31, r0
 686:	b1 1d       	adc	r27, r1
 688:	63 9f       	mul	r22, r19
 68a:	aa 27       	eor	r26, r26
 68c:	f0 0d       	add	r31, r0
 68e:	b1 1d       	adc	r27, r1
 690:	aa 1f       	adc	r26, r26
 692:	64 9f       	mul	r22, r20
 694:	66 27       	eor	r22, r22
 696:	b0 0d       	add	r27, r0
 698:	a1 1d       	adc	r26, r1
 69a:	66 1f       	adc	r22, r22
 69c:	82 9f       	mul	r24, r18
 69e:	22 27       	eor	r18, r18
 6a0:	b0 0d       	add	r27, r0
 6a2:	a1 1d       	adc	r26, r1
 6a4:	62 1f       	adc	r22, r18
 6a6:	73 9f       	mul	r23, r19
 6a8:	b0 0d       	add	r27, r0
 6aa:	a1 1d       	adc	r26, r1
 6ac:	62 1f       	adc	r22, r18
 6ae:	83 9f       	mul	r24, r19
 6b0:	a0 0d       	add	r26, r0
 6b2:	61 1d       	adc	r22, r1
 6b4:	22 1f       	adc	r18, r18
 6b6:	74 9f       	mul	r23, r20
 6b8:	33 27       	eor	r19, r19
 6ba:	a0 0d       	add	r26, r0
 6bc:	61 1d       	adc	r22, r1
 6be:	23 1f       	adc	r18, r19
 6c0:	84 9f       	mul	r24, r20
 6c2:	60 0d       	add	r22, r0
 6c4:	21 1d       	adc	r18, r1
 6c6:	82 2f       	mov	r24, r18
 6c8:	76 2f       	mov	r23, r22
 6ca:	6a 2f       	mov	r22, r26
 6cc:	11 24       	eor	r1, r1
 6ce:	9f 57       	subi	r25, 0x7F	; 127
 6d0:	50 40       	sbci	r21, 0x00	; 0
 6d2:	8a f0       	brmi	.+34     	; 0x6f6 <__mulsf3_pse+0x84>
 6d4:	e1 f0       	breq	.+56     	; 0x70e <__mulsf3_pse+0x9c>
 6d6:	88 23       	and	r24, r24
 6d8:	4a f0       	brmi	.+18     	; 0x6ec <__mulsf3_pse+0x7a>
 6da:	ee 0f       	add	r30, r30
 6dc:	ff 1f       	adc	r31, r31
 6de:	bb 1f       	adc	r27, r27
 6e0:	66 1f       	adc	r22, r22
 6e2:	77 1f       	adc	r23, r23
 6e4:	88 1f       	adc	r24, r24
 6e6:	91 50       	subi	r25, 0x01	; 1
 6e8:	50 40       	sbci	r21, 0x00	; 0
 6ea:	a9 f7       	brne	.-22     	; 0x6d6 <__mulsf3_pse+0x64>
 6ec:	9e 3f       	cpi	r25, 0xFE	; 254
 6ee:	51 05       	cpc	r21, r1
 6f0:	70 f0       	brcs	.+28     	; 0x70e <__mulsf3_pse+0x9c>
 6f2:	60 cf       	rjmp	.-320    	; 0x5b4 <__fp_inf>
 6f4:	aa cf       	rjmp	.-172    	; 0x64a <__fp_szero>
 6f6:	5f 3f       	cpi	r21, 0xFF	; 255
 6f8:	ec f3       	brlt	.-6      	; 0x6f4 <__mulsf3_pse+0x82>
 6fa:	98 3e       	cpi	r25, 0xE8	; 232
 6fc:	dc f3       	brlt	.-10     	; 0x6f4 <__mulsf3_pse+0x82>
 6fe:	86 95       	lsr	r24
 700:	77 95       	ror	r23
 702:	67 95       	ror	r22
 704:	b7 95       	ror	r27
 706:	f7 95       	ror	r31
 708:	e7 95       	ror	r30
 70a:	9f 5f       	subi	r25, 0xFF	; 255
 70c:	c1 f7       	brne	.-16     	; 0x6fe <__mulsf3_pse+0x8c>
 70e:	fe 2b       	or	r31, r30
 710:	88 0f       	add	r24, r24
 712:	91 1d       	adc	r25, r1
 714:	96 95       	lsr	r25
 716:	87 95       	ror	r24
 718:	97 f9       	bld	r25, 7
 71a:	08 95       	ret

0000071c <printf>:
 71c:	a0 e0       	ldi	r26, 0x00	; 0
 71e:	b0 e0       	ldi	r27, 0x00	; 0
 720:	e4 e9       	ldi	r30, 0x94	; 148
 722:	f3 e0       	ldi	r31, 0x03	; 3
 724:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__prologue_saves__+0x20>
 728:	fe 01       	movw	r30, r28
 72a:	35 96       	adiw	r30, 0x05	; 5
 72c:	61 91       	ld	r22, Z+
 72e:	71 91       	ld	r23, Z+
 730:	af 01       	movw	r20, r30
 732:	80 91 40 01 	lds	r24, 0x0140
 736:	90 91 41 01 	lds	r25, 0x0141
 73a:	0e 94 a2 03 	call	0x744	; 0x744 <vfprintf>
 73e:	e2 e0       	ldi	r30, 0x02	; 2
 740:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__epilogue_restores__+0x20>

00000744 <vfprintf>:
 744:	ac e0       	ldi	r26, 0x0C	; 12
 746:	b0 e0       	ldi	r27, 0x00	; 0
 748:	e8 ea       	ldi	r30, 0xA8	; 168
 74a:	f3 e0       	ldi	r31, 0x03	; 3
 74c:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__prologue_saves__>
 750:	7c 01       	movw	r14, r24
 752:	6b 01       	movw	r12, r22
 754:	8a 01       	movw	r16, r20
 756:	fc 01       	movw	r30, r24
 758:	17 82       	std	Z+7, r1	; 0x07
 75a:	16 82       	std	Z+6, r1	; 0x06
 75c:	83 81       	ldd	r24, Z+3	; 0x03
 75e:	81 ff       	sbrs	r24, 1
 760:	bd c1       	rjmp	.+890    	; 0xadc <__stack+0x1dd>
 762:	ce 01       	movw	r24, r28
 764:	01 96       	adiw	r24, 0x01	; 1
 766:	4c 01       	movw	r8, r24
 768:	f7 01       	movw	r30, r14
 76a:	93 81       	ldd	r25, Z+3	; 0x03
 76c:	f6 01       	movw	r30, r12
 76e:	93 fd       	sbrc	r25, 3
 770:	85 91       	lpm	r24, Z+
 772:	93 ff       	sbrs	r25, 3
 774:	81 91       	ld	r24, Z+
 776:	6f 01       	movw	r12, r30
 778:	88 23       	and	r24, r24
 77a:	09 f4       	brne	.+2      	; 0x77e <vfprintf+0x3a>
 77c:	ab c1       	rjmp	.+854    	; 0xad4 <__stack+0x1d5>
 77e:	85 32       	cpi	r24, 0x25	; 37
 780:	39 f4       	brne	.+14     	; 0x790 <vfprintf+0x4c>
 782:	93 fd       	sbrc	r25, 3
 784:	85 91       	lpm	r24, Z+
 786:	93 ff       	sbrs	r25, 3
 788:	81 91       	ld	r24, Z+
 78a:	6f 01       	movw	r12, r30
 78c:	85 32       	cpi	r24, 0x25	; 37
 78e:	29 f4       	brne	.+10     	; 0x79a <vfprintf+0x56>
 790:	b7 01       	movw	r22, r14
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 798:	e7 cf       	rjmp	.-50     	; 0x768 <vfprintf+0x24>
 79a:	51 2c       	mov	r5, r1
 79c:	31 2c       	mov	r3, r1
 79e:	20 e0       	ldi	r18, 0x00	; 0
 7a0:	20 32       	cpi	r18, 0x20	; 32
 7a2:	a0 f4       	brcc	.+40     	; 0x7cc <vfprintf+0x88>
 7a4:	8b 32       	cpi	r24, 0x2B	; 43
 7a6:	69 f0       	breq	.+26     	; 0x7c2 <vfprintf+0x7e>
 7a8:	30 f4       	brcc	.+12     	; 0x7b6 <vfprintf+0x72>
 7aa:	80 32       	cpi	r24, 0x20	; 32
 7ac:	59 f0       	breq	.+22     	; 0x7c4 <vfprintf+0x80>
 7ae:	83 32       	cpi	r24, 0x23	; 35
 7b0:	69 f4       	brne	.+26     	; 0x7cc <vfprintf+0x88>
 7b2:	20 61       	ori	r18, 0x10	; 16
 7b4:	2c c0       	rjmp	.+88     	; 0x80e <vfprintf+0xca>
 7b6:	8d 32       	cpi	r24, 0x2D	; 45
 7b8:	39 f0       	breq	.+14     	; 0x7c8 <vfprintf+0x84>
 7ba:	80 33       	cpi	r24, 0x30	; 48
 7bc:	39 f4       	brne	.+14     	; 0x7cc <vfprintf+0x88>
 7be:	21 60       	ori	r18, 0x01	; 1
 7c0:	26 c0       	rjmp	.+76     	; 0x80e <vfprintf+0xca>
 7c2:	22 60       	ori	r18, 0x02	; 2
 7c4:	24 60       	ori	r18, 0x04	; 4
 7c6:	23 c0       	rjmp	.+70     	; 0x80e <vfprintf+0xca>
 7c8:	28 60       	ori	r18, 0x08	; 8
 7ca:	21 c0       	rjmp	.+66     	; 0x80e <vfprintf+0xca>
 7cc:	27 fd       	sbrc	r18, 7
 7ce:	27 c0       	rjmp	.+78     	; 0x81e <vfprintf+0xda>
 7d0:	30 ed       	ldi	r19, 0xD0	; 208
 7d2:	38 0f       	add	r19, r24
 7d4:	3a 30       	cpi	r19, 0x0A	; 10
 7d6:	78 f4       	brcc	.+30     	; 0x7f6 <vfprintf+0xb2>
 7d8:	26 ff       	sbrs	r18, 6
 7da:	06 c0       	rjmp	.+12     	; 0x7e8 <vfprintf+0xa4>
 7dc:	fa e0       	ldi	r31, 0x0A	; 10
 7de:	5f 9e       	mul	r5, r31
 7e0:	30 0d       	add	r19, r0
 7e2:	11 24       	eor	r1, r1
 7e4:	53 2e       	mov	r5, r19
 7e6:	13 c0       	rjmp	.+38     	; 0x80e <vfprintf+0xca>
 7e8:	8a e0       	ldi	r24, 0x0A	; 10
 7ea:	38 9e       	mul	r3, r24
 7ec:	30 0d       	add	r19, r0
 7ee:	11 24       	eor	r1, r1
 7f0:	33 2e       	mov	r3, r19
 7f2:	20 62       	ori	r18, 0x20	; 32
 7f4:	0c c0       	rjmp	.+24     	; 0x80e <vfprintf+0xca>
 7f6:	8e 32       	cpi	r24, 0x2E	; 46
 7f8:	21 f4       	brne	.+8      	; 0x802 <vfprintf+0xbe>
 7fa:	26 fd       	sbrc	r18, 6
 7fc:	6b c1       	rjmp	.+726    	; 0xad4 <__stack+0x1d5>
 7fe:	20 64       	ori	r18, 0x40	; 64
 800:	06 c0       	rjmp	.+12     	; 0x80e <vfprintf+0xca>
 802:	8c 36       	cpi	r24, 0x6C	; 108
 804:	11 f4       	brne	.+4      	; 0x80a <vfprintf+0xc6>
 806:	20 68       	ori	r18, 0x80	; 128
 808:	02 c0       	rjmp	.+4      	; 0x80e <vfprintf+0xca>
 80a:	88 36       	cpi	r24, 0x68	; 104
 80c:	41 f4       	brne	.+16     	; 0x81e <vfprintf+0xda>
 80e:	f6 01       	movw	r30, r12
 810:	93 fd       	sbrc	r25, 3
 812:	85 91       	lpm	r24, Z+
 814:	93 ff       	sbrs	r25, 3
 816:	81 91       	ld	r24, Z+
 818:	6f 01       	movw	r12, r30
 81a:	81 11       	cpse	r24, r1
 81c:	c1 cf       	rjmp	.-126    	; 0x7a0 <vfprintf+0x5c>
 81e:	98 2f       	mov	r25, r24
 820:	9f 7d       	andi	r25, 0xDF	; 223
 822:	95 54       	subi	r25, 0x45	; 69
 824:	93 30       	cpi	r25, 0x03	; 3
 826:	28 f4       	brcc	.+10     	; 0x832 <vfprintf+0xee>
 828:	0c 5f       	subi	r16, 0xFC	; 252
 82a:	1f 4f       	sbci	r17, 0xFF	; 255
 82c:	ff e3       	ldi	r31, 0x3F	; 63
 82e:	f9 83       	std	Y+1, r31	; 0x01
 830:	0d c0       	rjmp	.+26     	; 0x84c <vfprintf+0x108>
 832:	83 36       	cpi	r24, 0x63	; 99
 834:	31 f0       	breq	.+12     	; 0x842 <vfprintf+0xfe>
 836:	83 37       	cpi	r24, 0x73	; 115
 838:	71 f0       	breq	.+28     	; 0x856 <vfprintf+0x112>
 83a:	83 35       	cpi	r24, 0x53	; 83
 83c:	09 f0       	breq	.+2      	; 0x840 <vfprintf+0xfc>
 83e:	5b c0       	rjmp	.+182    	; 0x8f6 <vfprintf+0x1b2>
 840:	22 c0       	rjmp	.+68     	; 0x886 <vfprintf+0x142>
 842:	f8 01       	movw	r30, r16
 844:	80 81       	ld	r24, Z
 846:	89 83       	std	Y+1, r24	; 0x01
 848:	0e 5f       	subi	r16, 0xFE	; 254
 84a:	1f 4f       	sbci	r17, 0xFF	; 255
 84c:	44 24       	eor	r4, r4
 84e:	43 94       	inc	r4
 850:	51 2c       	mov	r5, r1
 852:	54 01       	movw	r10, r8
 854:	15 c0       	rjmp	.+42     	; 0x880 <vfprintf+0x13c>
 856:	38 01       	movw	r6, r16
 858:	f2 e0       	ldi	r31, 0x02	; 2
 85a:	6f 0e       	add	r6, r31
 85c:	71 1c       	adc	r7, r1
 85e:	f8 01       	movw	r30, r16
 860:	a0 80       	ld	r10, Z
 862:	b1 80       	ldd	r11, Z+1	; 0x01
 864:	26 ff       	sbrs	r18, 6
 866:	03 c0       	rjmp	.+6      	; 0x86e <vfprintf+0x12a>
 868:	65 2d       	mov	r22, r5
 86a:	70 e0       	ldi	r23, 0x00	; 0
 86c:	02 c0       	rjmp	.+4      	; 0x872 <vfprintf+0x12e>
 86e:	6f ef       	ldi	r22, 0xFF	; 255
 870:	7f ef       	ldi	r23, 0xFF	; 255
 872:	c5 01       	movw	r24, r10
 874:	2c 87       	std	Y+12, r18	; 0x0c
 876:	0e 94 7f 05 	call	0xafe	; 0xafe <strnlen>
 87a:	2c 01       	movw	r4, r24
 87c:	83 01       	movw	r16, r6
 87e:	2c 85       	ldd	r18, Y+12	; 0x0c
 880:	2f 77       	andi	r18, 0x7F	; 127
 882:	22 2e       	mov	r2, r18
 884:	17 c0       	rjmp	.+46     	; 0x8b4 <vfprintf+0x170>
 886:	38 01       	movw	r6, r16
 888:	f2 e0       	ldi	r31, 0x02	; 2
 88a:	6f 0e       	add	r6, r31
 88c:	71 1c       	adc	r7, r1
 88e:	f8 01       	movw	r30, r16
 890:	a0 80       	ld	r10, Z
 892:	b1 80       	ldd	r11, Z+1	; 0x01
 894:	26 ff       	sbrs	r18, 6
 896:	03 c0       	rjmp	.+6      	; 0x89e <vfprintf+0x15a>
 898:	65 2d       	mov	r22, r5
 89a:	70 e0       	ldi	r23, 0x00	; 0
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <vfprintf+0x15e>
 89e:	6f ef       	ldi	r22, 0xFF	; 255
 8a0:	7f ef       	ldi	r23, 0xFF	; 255
 8a2:	c5 01       	movw	r24, r10
 8a4:	2c 87       	std	Y+12, r18	; 0x0c
 8a6:	0e 94 74 05 	call	0xae8	; 0xae8 <strnlen_P>
 8aa:	2c 01       	movw	r4, r24
 8ac:	2c 85       	ldd	r18, Y+12	; 0x0c
 8ae:	20 68       	ori	r18, 0x80	; 128
 8b0:	22 2e       	mov	r2, r18
 8b2:	83 01       	movw	r16, r6
 8b4:	23 fc       	sbrc	r2, 3
 8b6:	1b c0       	rjmp	.+54     	; 0x8ee <vfprintf+0x1aa>
 8b8:	83 2d       	mov	r24, r3
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	48 16       	cp	r4, r24
 8be:	59 06       	cpc	r5, r25
 8c0:	b0 f4       	brcc	.+44     	; 0x8ee <vfprintf+0x1aa>
 8c2:	b7 01       	movw	r22, r14
 8c4:	80 e2       	ldi	r24, 0x20	; 32
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 8cc:	3a 94       	dec	r3
 8ce:	f4 cf       	rjmp	.-24     	; 0x8b8 <vfprintf+0x174>
 8d0:	f5 01       	movw	r30, r10
 8d2:	27 fc       	sbrc	r2, 7
 8d4:	85 91       	lpm	r24, Z+
 8d6:	27 fe       	sbrs	r2, 7
 8d8:	81 91       	ld	r24, Z+
 8da:	5f 01       	movw	r10, r30
 8dc:	b7 01       	movw	r22, r14
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 8e4:	31 10       	cpse	r3, r1
 8e6:	3a 94       	dec	r3
 8e8:	f1 e0       	ldi	r31, 0x01	; 1
 8ea:	4f 1a       	sub	r4, r31
 8ec:	51 08       	sbc	r5, r1
 8ee:	41 14       	cp	r4, r1
 8f0:	51 04       	cpc	r5, r1
 8f2:	71 f7       	brne	.-36     	; 0x8d0 <vfprintf+0x18c>
 8f4:	e5 c0       	rjmp	.+458    	; 0xac0 <__stack+0x1c1>
 8f6:	84 36       	cpi	r24, 0x64	; 100
 8f8:	11 f0       	breq	.+4      	; 0x8fe <vfprintf+0x1ba>
 8fa:	89 36       	cpi	r24, 0x69	; 105
 8fc:	39 f5       	brne	.+78     	; 0x94c <__stack+0x4d>
 8fe:	f8 01       	movw	r30, r16
 900:	27 ff       	sbrs	r18, 7
 902:	07 c0       	rjmp	.+14     	; 0x912 <__stack+0x13>
 904:	60 81       	ld	r22, Z
 906:	71 81       	ldd	r23, Z+1	; 0x01
 908:	82 81       	ldd	r24, Z+2	; 0x02
 90a:	93 81       	ldd	r25, Z+3	; 0x03
 90c:	0c 5f       	subi	r16, 0xFC	; 252
 90e:	1f 4f       	sbci	r17, 0xFF	; 255
 910:	08 c0       	rjmp	.+16     	; 0x922 <__stack+0x23>
 912:	60 81       	ld	r22, Z
 914:	71 81       	ldd	r23, Z+1	; 0x01
 916:	88 27       	eor	r24, r24
 918:	77 fd       	sbrc	r23, 7
 91a:	80 95       	com	r24
 91c:	98 2f       	mov	r25, r24
 91e:	0e 5f       	subi	r16, 0xFE	; 254
 920:	1f 4f       	sbci	r17, 0xFF	; 255
 922:	2f 76       	andi	r18, 0x6F	; 111
 924:	b2 2e       	mov	r11, r18
 926:	97 ff       	sbrs	r25, 7
 928:	09 c0       	rjmp	.+18     	; 0x93c <__stack+0x3d>
 92a:	90 95       	com	r25
 92c:	80 95       	com	r24
 92e:	70 95       	com	r23
 930:	61 95       	neg	r22
 932:	7f 4f       	sbci	r23, 0xFF	; 255
 934:	8f 4f       	sbci	r24, 0xFF	; 255
 936:	9f 4f       	sbci	r25, 0xFF	; 255
 938:	20 68       	ori	r18, 0x80	; 128
 93a:	b2 2e       	mov	r11, r18
 93c:	2a e0       	ldi	r18, 0x0A	; 10
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	a4 01       	movw	r20, r8
 942:	0e 94 bc 05 	call	0xb78	; 0xb78 <__ultoa_invert>
 946:	a8 2e       	mov	r10, r24
 948:	a8 18       	sub	r10, r8
 94a:	44 c0       	rjmp	.+136    	; 0x9d4 <__stack+0xd5>
 94c:	85 37       	cpi	r24, 0x75	; 117
 94e:	29 f4       	brne	.+10     	; 0x95a <__stack+0x5b>
 950:	2f 7e       	andi	r18, 0xEF	; 239
 952:	b2 2e       	mov	r11, r18
 954:	2a e0       	ldi	r18, 0x0A	; 10
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	25 c0       	rjmp	.+74     	; 0x9a4 <__stack+0xa5>
 95a:	f2 2f       	mov	r31, r18
 95c:	f9 7f       	andi	r31, 0xF9	; 249
 95e:	bf 2e       	mov	r11, r31
 960:	8f 36       	cpi	r24, 0x6F	; 111
 962:	c1 f0       	breq	.+48     	; 0x994 <__stack+0x95>
 964:	18 f4       	brcc	.+6      	; 0x96c <__stack+0x6d>
 966:	88 35       	cpi	r24, 0x58	; 88
 968:	79 f0       	breq	.+30     	; 0x988 <__stack+0x89>
 96a:	b4 c0       	rjmp	.+360    	; 0xad4 <__stack+0x1d5>
 96c:	80 37       	cpi	r24, 0x70	; 112
 96e:	19 f0       	breq	.+6      	; 0x976 <__stack+0x77>
 970:	88 37       	cpi	r24, 0x78	; 120
 972:	21 f0       	breq	.+8      	; 0x97c <__stack+0x7d>
 974:	af c0       	rjmp	.+350    	; 0xad4 <__stack+0x1d5>
 976:	2f 2f       	mov	r18, r31
 978:	20 61       	ori	r18, 0x10	; 16
 97a:	b2 2e       	mov	r11, r18
 97c:	b4 fe       	sbrs	r11, 4
 97e:	0d c0       	rjmp	.+26     	; 0x99a <__stack+0x9b>
 980:	8b 2d       	mov	r24, r11
 982:	84 60       	ori	r24, 0x04	; 4
 984:	b8 2e       	mov	r11, r24
 986:	09 c0       	rjmp	.+18     	; 0x99a <__stack+0x9b>
 988:	24 ff       	sbrs	r18, 4
 98a:	0a c0       	rjmp	.+20     	; 0x9a0 <__stack+0xa1>
 98c:	9f 2f       	mov	r25, r31
 98e:	96 60       	ori	r25, 0x06	; 6
 990:	b9 2e       	mov	r11, r25
 992:	06 c0       	rjmp	.+12     	; 0x9a0 <__stack+0xa1>
 994:	28 e0       	ldi	r18, 0x08	; 8
 996:	30 e0       	ldi	r19, 0x00	; 0
 998:	05 c0       	rjmp	.+10     	; 0x9a4 <__stack+0xa5>
 99a:	20 e1       	ldi	r18, 0x10	; 16
 99c:	30 e0       	ldi	r19, 0x00	; 0
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <__stack+0xa5>
 9a0:	20 e1       	ldi	r18, 0x10	; 16
 9a2:	32 e0       	ldi	r19, 0x02	; 2
 9a4:	f8 01       	movw	r30, r16
 9a6:	b7 fe       	sbrs	r11, 7
 9a8:	07 c0       	rjmp	.+14     	; 0x9b8 <__stack+0xb9>
 9aa:	60 81       	ld	r22, Z
 9ac:	71 81       	ldd	r23, Z+1	; 0x01
 9ae:	82 81       	ldd	r24, Z+2	; 0x02
 9b0:	93 81       	ldd	r25, Z+3	; 0x03
 9b2:	0c 5f       	subi	r16, 0xFC	; 252
 9b4:	1f 4f       	sbci	r17, 0xFF	; 255
 9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <__stack+0xc5>
 9b8:	60 81       	ld	r22, Z
 9ba:	71 81       	ldd	r23, Z+1	; 0x01
 9bc:	80 e0       	ldi	r24, 0x00	; 0
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 5f       	subi	r16, 0xFE	; 254
 9c2:	1f 4f       	sbci	r17, 0xFF	; 255
 9c4:	a4 01       	movw	r20, r8
 9c6:	0e 94 bc 05 	call	0xb78	; 0xb78 <__ultoa_invert>
 9ca:	a8 2e       	mov	r10, r24
 9cc:	a8 18       	sub	r10, r8
 9ce:	fb 2d       	mov	r31, r11
 9d0:	ff 77       	andi	r31, 0x7F	; 127
 9d2:	bf 2e       	mov	r11, r31
 9d4:	b6 fe       	sbrs	r11, 6
 9d6:	0b c0       	rjmp	.+22     	; 0x9ee <__stack+0xef>
 9d8:	2b 2d       	mov	r18, r11
 9da:	2e 7f       	andi	r18, 0xFE	; 254
 9dc:	a5 14       	cp	r10, r5
 9de:	50 f4       	brcc	.+20     	; 0x9f4 <__stack+0xf5>
 9e0:	b4 fe       	sbrs	r11, 4
 9e2:	0a c0       	rjmp	.+20     	; 0x9f8 <__stack+0xf9>
 9e4:	b2 fc       	sbrc	r11, 2
 9e6:	08 c0       	rjmp	.+16     	; 0x9f8 <__stack+0xf9>
 9e8:	2b 2d       	mov	r18, r11
 9ea:	2e 7e       	andi	r18, 0xEE	; 238
 9ec:	05 c0       	rjmp	.+10     	; 0x9f8 <__stack+0xf9>
 9ee:	7a 2c       	mov	r7, r10
 9f0:	2b 2d       	mov	r18, r11
 9f2:	03 c0       	rjmp	.+6      	; 0x9fa <__stack+0xfb>
 9f4:	7a 2c       	mov	r7, r10
 9f6:	01 c0       	rjmp	.+2      	; 0x9fa <__stack+0xfb>
 9f8:	75 2c       	mov	r7, r5
 9fa:	24 ff       	sbrs	r18, 4
 9fc:	0d c0       	rjmp	.+26     	; 0xa18 <__stack+0x119>
 9fe:	fe 01       	movw	r30, r28
 a00:	ea 0d       	add	r30, r10
 a02:	f1 1d       	adc	r31, r1
 a04:	80 81       	ld	r24, Z
 a06:	80 33       	cpi	r24, 0x30	; 48
 a08:	11 f4       	brne	.+4      	; 0xa0e <__stack+0x10f>
 a0a:	29 7e       	andi	r18, 0xE9	; 233
 a0c:	09 c0       	rjmp	.+18     	; 0xa20 <__stack+0x121>
 a0e:	22 ff       	sbrs	r18, 2
 a10:	06 c0       	rjmp	.+12     	; 0xa1e <__stack+0x11f>
 a12:	73 94       	inc	r7
 a14:	73 94       	inc	r7
 a16:	04 c0       	rjmp	.+8      	; 0xa20 <__stack+0x121>
 a18:	82 2f       	mov	r24, r18
 a1a:	86 78       	andi	r24, 0x86	; 134
 a1c:	09 f0       	breq	.+2      	; 0xa20 <__stack+0x121>
 a1e:	73 94       	inc	r7
 a20:	23 fd       	sbrc	r18, 3
 a22:	13 c0       	rjmp	.+38     	; 0xa4a <__stack+0x14b>
 a24:	20 ff       	sbrs	r18, 0
 a26:	06 c0       	rjmp	.+12     	; 0xa34 <__stack+0x135>
 a28:	5a 2c       	mov	r5, r10
 a2a:	73 14       	cp	r7, r3
 a2c:	18 f4       	brcc	.+6      	; 0xa34 <__stack+0x135>
 a2e:	53 0c       	add	r5, r3
 a30:	57 18       	sub	r5, r7
 a32:	73 2c       	mov	r7, r3
 a34:	73 14       	cp	r7, r3
 a36:	68 f4       	brcc	.+26     	; 0xa52 <__stack+0x153>
 a38:	b7 01       	movw	r22, r14
 a3a:	80 e2       	ldi	r24, 0x20	; 32
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	2c 87       	std	Y+12, r18	; 0x0c
 a40:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 a44:	73 94       	inc	r7
 a46:	2c 85       	ldd	r18, Y+12	; 0x0c
 a48:	f5 cf       	rjmp	.-22     	; 0xa34 <__stack+0x135>
 a4a:	73 14       	cp	r7, r3
 a4c:	10 f4       	brcc	.+4      	; 0xa52 <__stack+0x153>
 a4e:	37 18       	sub	r3, r7
 a50:	01 c0       	rjmp	.+2      	; 0xa54 <__stack+0x155>
 a52:	31 2c       	mov	r3, r1
 a54:	24 ff       	sbrs	r18, 4
 a56:	12 c0       	rjmp	.+36     	; 0xa7c <__stack+0x17d>
 a58:	b7 01       	movw	r22, r14
 a5a:	80 e3       	ldi	r24, 0x30	; 48
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	2c 87       	std	Y+12, r18	; 0x0c
 a60:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 a64:	2c 85       	ldd	r18, Y+12	; 0x0c
 a66:	22 ff       	sbrs	r18, 2
 a68:	17 c0       	rjmp	.+46     	; 0xa98 <__stack+0x199>
 a6a:	21 ff       	sbrs	r18, 1
 a6c:	03 c0       	rjmp	.+6      	; 0xa74 <__stack+0x175>
 a6e:	88 e5       	ldi	r24, 0x58	; 88
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	02 c0       	rjmp	.+4      	; 0xa78 <__stack+0x179>
 a74:	88 e7       	ldi	r24, 0x78	; 120
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	b7 01       	movw	r22, r14
 a7a:	0c c0       	rjmp	.+24     	; 0xa94 <__stack+0x195>
 a7c:	82 2f       	mov	r24, r18
 a7e:	86 78       	andi	r24, 0x86	; 134
 a80:	59 f0       	breq	.+22     	; 0xa98 <__stack+0x199>
 a82:	21 fd       	sbrc	r18, 1
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <__stack+0x18b>
 a86:	80 e2       	ldi	r24, 0x20	; 32
 a88:	01 c0       	rjmp	.+2      	; 0xa8c <__stack+0x18d>
 a8a:	8b e2       	ldi	r24, 0x2B	; 43
 a8c:	27 fd       	sbrc	r18, 7
 a8e:	8d e2       	ldi	r24, 0x2D	; 45
 a90:	b7 01       	movw	r22, r14
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 a98:	a5 14       	cp	r10, r5
 a9a:	38 f4       	brcc	.+14     	; 0xaaa <__stack+0x1ab>
 a9c:	b7 01       	movw	r22, r14
 a9e:	80 e3       	ldi	r24, 0x30	; 48
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 aa6:	5a 94       	dec	r5
 aa8:	f7 cf       	rjmp	.-18     	; 0xa98 <__stack+0x199>
 aaa:	aa 94       	dec	r10
 aac:	f4 01       	movw	r30, r8
 aae:	ea 0d       	add	r30, r10
 ab0:	f1 1d       	adc	r31, r1
 ab2:	80 81       	ld	r24, Z
 ab4:	b7 01       	movw	r22, r14
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 abc:	a1 10       	cpse	r10, r1
 abe:	f5 cf       	rjmp	.-22     	; 0xaaa <__stack+0x1ab>
 ac0:	33 20       	and	r3, r3
 ac2:	09 f4       	brne	.+2      	; 0xac6 <__stack+0x1c7>
 ac4:	51 ce       	rjmp	.-862    	; 0x768 <vfprintf+0x24>
 ac6:	b7 01       	movw	r22, r14
 ac8:	80 e2       	ldi	r24, 0x20	; 32
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	0e 94 8a 05 	call	0xb14	; 0xb14 <fputc>
 ad0:	3a 94       	dec	r3
 ad2:	f6 cf       	rjmp	.-20     	; 0xac0 <__stack+0x1c1>
 ad4:	f7 01       	movw	r30, r14
 ad6:	86 81       	ldd	r24, Z+6	; 0x06
 ad8:	97 81       	ldd	r25, Z+7	; 0x07
 ada:	02 c0       	rjmp	.+4      	; 0xae0 <__stack+0x1e1>
 adc:	8f ef       	ldi	r24, 0xFF	; 255
 ade:	9f ef       	ldi	r25, 0xFF	; 255
 ae0:	2c 96       	adiw	r28, 0x0c	; 12
 ae2:	e2 e1       	ldi	r30, 0x12	; 18
 ae4:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <__epilogue_restores__>

00000ae8 <strnlen_P>:
 ae8:	fc 01       	movw	r30, r24
 aea:	05 90       	lpm	r0, Z+
 aec:	61 50       	subi	r22, 0x01	; 1
 aee:	70 40       	sbci	r23, 0x00	; 0
 af0:	01 10       	cpse	r0, r1
 af2:	d8 f7       	brcc	.-10     	; 0xaea <strnlen_P+0x2>
 af4:	80 95       	com	r24
 af6:	90 95       	com	r25
 af8:	8e 0f       	add	r24, r30
 afa:	9f 1f       	adc	r25, r31
 afc:	08 95       	ret

00000afe <strnlen>:
 afe:	fc 01       	movw	r30, r24
 b00:	61 50       	subi	r22, 0x01	; 1
 b02:	70 40       	sbci	r23, 0x00	; 0
 b04:	01 90       	ld	r0, Z+
 b06:	01 10       	cpse	r0, r1
 b08:	d8 f7       	brcc	.-10     	; 0xb00 <strnlen+0x2>
 b0a:	80 95       	com	r24
 b0c:	90 95       	com	r25
 b0e:	8e 0f       	add	r24, r30
 b10:	9f 1f       	adc	r25, r31
 b12:	08 95       	ret

00000b14 <fputc>:
 b14:	0f 93       	push	r16
 b16:	1f 93       	push	r17
 b18:	cf 93       	push	r28
 b1a:	df 93       	push	r29
 b1c:	18 2f       	mov	r17, r24
 b1e:	09 2f       	mov	r16, r25
 b20:	eb 01       	movw	r28, r22
 b22:	8b 81       	ldd	r24, Y+3	; 0x03
 b24:	81 fd       	sbrc	r24, 1
 b26:	03 c0       	rjmp	.+6      	; 0xb2e <fputc+0x1a>
 b28:	8f ef       	ldi	r24, 0xFF	; 255
 b2a:	9f ef       	ldi	r25, 0xFF	; 255
 b2c:	20 c0       	rjmp	.+64     	; 0xb6e <fputc+0x5a>
 b2e:	82 ff       	sbrs	r24, 2
 b30:	10 c0       	rjmp	.+32     	; 0xb52 <fputc+0x3e>
 b32:	4e 81       	ldd	r20, Y+6	; 0x06
 b34:	5f 81       	ldd	r21, Y+7	; 0x07
 b36:	2c 81       	ldd	r18, Y+4	; 0x04
 b38:	3d 81       	ldd	r19, Y+5	; 0x05
 b3a:	42 17       	cp	r20, r18
 b3c:	53 07       	cpc	r21, r19
 b3e:	7c f4       	brge	.+30     	; 0xb5e <fputc+0x4a>
 b40:	e8 81       	ld	r30, Y
 b42:	f9 81       	ldd	r31, Y+1	; 0x01
 b44:	9f 01       	movw	r18, r30
 b46:	2f 5f       	subi	r18, 0xFF	; 255
 b48:	3f 4f       	sbci	r19, 0xFF	; 255
 b4a:	39 83       	std	Y+1, r19	; 0x01
 b4c:	28 83       	st	Y, r18
 b4e:	10 83       	st	Z, r17
 b50:	06 c0       	rjmp	.+12     	; 0xb5e <fputc+0x4a>
 b52:	e8 85       	ldd	r30, Y+8	; 0x08
 b54:	f9 85       	ldd	r31, Y+9	; 0x09
 b56:	81 2f       	mov	r24, r17
 b58:	09 95       	icall
 b5a:	89 2b       	or	r24, r25
 b5c:	29 f7       	brne	.-54     	; 0xb28 <fputc+0x14>
 b5e:	2e 81       	ldd	r18, Y+6	; 0x06
 b60:	3f 81       	ldd	r19, Y+7	; 0x07
 b62:	2f 5f       	subi	r18, 0xFF	; 255
 b64:	3f 4f       	sbci	r19, 0xFF	; 255
 b66:	3f 83       	std	Y+7, r19	; 0x07
 b68:	2e 83       	std	Y+6, r18	; 0x06
 b6a:	81 2f       	mov	r24, r17
 b6c:	90 2f       	mov	r25, r16
 b6e:	df 91       	pop	r29
 b70:	cf 91       	pop	r28
 b72:	1f 91       	pop	r17
 b74:	0f 91       	pop	r16
 b76:	08 95       	ret

00000b78 <__ultoa_invert>:
 b78:	fa 01       	movw	r30, r20
 b7a:	aa 27       	eor	r26, r26
 b7c:	28 30       	cpi	r18, 0x08	; 8
 b7e:	51 f1       	breq	.+84     	; 0xbd4 <__ultoa_invert+0x5c>
 b80:	20 31       	cpi	r18, 0x10	; 16
 b82:	81 f1       	breq	.+96     	; 0xbe4 <__ultoa_invert+0x6c>
 b84:	e8 94       	clt
 b86:	6f 93       	push	r22
 b88:	6e 7f       	andi	r22, 0xFE	; 254
 b8a:	6e 5f       	subi	r22, 0xFE	; 254
 b8c:	7f 4f       	sbci	r23, 0xFF	; 255
 b8e:	8f 4f       	sbci	r24, 0xFF	; 255
 b90:	9f 4f       	sbci	r25, 0xFF	; 255
 b92:	af 4f       	sbci	r26, 0xFF	; 255
 b94:	b1 e0       	ldi	r27, 0x01	; 1
 b96:	3e d0       	rcall	.+124    	; 0xc14 <__ultoa_invert+0x9c>
 b98:	b4 e0       	ldi	r27, 0x04	; 4
 b9a:	3c d0       	rcall	.+120    	; 0xc14 <__ultoa_invert+0x9c>
 b9c:	67 0f       	add	r22, r23
 b9e:	78 1f       	adc	r23, r24
 ba0:	89 1f       	adc	r24, r25
 ba2:	9a 1f       	adc	r25, r26
 ba4:	a1 1d       	adc	r26, r1
 ba6:	68 0f       	add	r22, r24
 ba8:	79 1f       	adc	r23, r25
 baa:	8a 1f       	adc	r24, r26
 bac:	91 1d       	adc	r25, r1
 bae:	a1 1d       	adc	r26, r1
 bb0:	6a 0f       	add	r22, r26
 bb2:	71 1d       	adc	r23, r1
 bb4:	81 1d       	adc	r24, r1
 bb6:	91 1d       	adc	r25, r1
 bb8:	a1 1d       	adc	r26, r1
 bba:	20 d0       	rcall	.+64     	; 0xbfc <__ultoa_invert+0x84>
 bbc:	09 f4       	brne	.+2      	; 0xbc0 <__ultoa_invert+0x48>
 bbe:	68 94       	set
 bc0:	3f 91       	pop	r19
 bc2:	2a e0       	ldi	r18, 0x0A	; 10
 bc4:	26 9f       	mul	r18, r22
 bc6:	11 24       	eor	r1, r1
 bc8:	30 19       	sub	r19, r0
 bca:	30 5d       	subi	r19, 0xD0	; 208
 bcc:	31 93       	st	Z+, r19
 bce:	de f6       	brtc	.-74     	; 0xb86 <__ultoa_invert+0xe>
 bd0:	cf 01       	movw	r24, r30
 bd2:	08 95       	ret
 bd4:	46 2f       	mov	r20, r22
 bd6:	47 70       	andi	r20, 0x07	; 7
 bd8:	40 5d       	subi	r20, 0xD0	; 208
 bda:	41 93       	st	Z+, r20
 bdc:	b3 e0       	ldi	r27, 0x03	; 3
 bde:	0f d0       	rcall	.+30     	; 0xbfe <__ultoa_invert+0x86>
 be0:	c9 f7       	brne	.-14     	; 0xbd4 <__ultoa_invert+0x5c>
 be2:	f6 cf       	rjmp	.-20     	; 0xbd0 <__ultoa_invert+0x58>
 be4:	46 2f       	mov	r20, r22
 be6:	4f 70       	andi	r20, 0x0F	; 15
 be8:	40 5d       	subi	r20, 0xD0	; 208
 bea:	4a 33       	cpi	r20, 0x3A	; 58
 bec:	18 f0       	brcs	.+6      	; 0xbf4 <__ultoa_invert+0x7c>
 bee:	49 5d       	subi	r20, 0xD9	; 217
 bf0:	31 fd       	sbrc	r19, 1
 bf2:	40 52       	subi	r20, 0x20	; 32
 bf4:	41 93       	st	Z+, r20
 bf6:	02 d0       	rcall	.+4      	; 0xbfc <__ultoa_invert+0x84>
 bf8:	a9 f7       	brne	.-22     	; 0xbe4 <__ultoa_invert+0x6c>
 bfa:	ea cf       	rjmp	.-44     	; 0xbd0 <__ultoa_invert+0x58>
 bfc:	b4 e0       	ldi	r27, 0x04	; 4
 bfe:	a6 95       	lsr	r26
 c00:	97 95       	ror	r25
 c02:	87 95       	ror	r24
 c04:	77 95       	ror	r23
 c06:	67 95       	ror	r22
 c08:	ba 95       	dec	r27
 c0a:	c9 f7       	brne	.-14     	; 0xbfe <__ultoa_invert+0x86>
 c0c:	00 97       	sbiw	r24, 0x00	; 0
 c0e:	61 05       	cpc	r22, r1
 c10:	71 05       	cpc	r23, r1
 c12:	08 95       	ret
 c14:	9b 01       	movw	r18, r22
 c16:	ac 01       	movw	r20, r24
 c18:	0a 2e       	mov	r0, r26
 c1a:	06 94       	lsr	r0
 c1c:	57 95       	ror	r21
 c1e:	47 95       	ror	r20
 c20:	37 95       	ror	r19
 c22:	27 95       	ror	r18
 c24:	ba 95       	dec	r27
 c26:	c9 f7       	brne	.-14     	; 0xc1a <__ultoa_invert+0xa2>
 c28:	62 0f       	add	r22, r18
 c2a:	73 1f       	adc	r23, r19
 c2c:	84 1f       	adc	r24, r20
 c2e:	95 1f       	adc	r25, r21
 c30:	a0 1d       	adc	r26, r0
 c32:	08 95       	ret

00000c34 <__prologue_saves__>:
 c34:	2f 92       	push	r2
 c36:	3f 92       	push	r3
 c38:	4f 92       	push	r4
 c3a:	5f 92       	push	r5
 c3c:	6f 92       	push	r6
 c3e:	7f 92       	push	r7
 c40:	8f 92       	push	r8
 c42:	9f 92       	push	r9
 c44:	af 92       	push	r10
 c46:	bf 92       	push	r11
 c48:	cf 92       	push	r12
 c4a:	df 92       	push	r13
 c4c:	ef 92       	push	r14
 c4e:	ff 92       	push	r15
 c50:	0f 93       	push	r16
 c52:	1f 93       	push	r17
 c54:	cf 93       	push	r28
 c56:	df 93       	push	r29
 c58:	cd b7       	in	r28, 0x3d	; 61
 c5a:	de b7       	in	r29, 0x3e	; 62
 c5c:	ca 1b       	sub	r28, r26
 c5e:	db 0b       	sbc	r29, r27
 c60:	0f b6       	in	r0, 0x3f	; 63
 c62:	f8 94       	cli
 c64:	de bf       	out	0x3e, r29	; 62
 c66:	0f be       	out	0x3f, r0	; 63
 c68:	cd bf       	out	0x3d, r28	; 61
 c6a:	09 94       	ijmp

00000c6c <__epilogue_restores__>:
 c6c:	2a 88       	ldd	r2, Y+18	; 0x12
 c6e:	39 88       	ldd	r3, Y+17	; 0x11
 c70:	48 88       	ldd	r4, Y+16	; 0x10
 c72:	5f 84       	ldd	r5, Y+15	; 0x0f
 c74:	6e 84       	ldd	r6, Y+14	; 0x0e
 c76:	7d 84       	ldd	r7, Y+13	; 0x0d
 c78:	8c 84       	ldd	r8, Y+12	; 0x0c
 c7a:	9b 84       	ldd	r9, Y+11	; 0x0b
 c7c:	aa 84       	ldd	r10, Y+10	; 0x0a
 c7e:	b9 84       	ldd	r11, Y+9	; 0x09
 c80:	c8 84       	ldd	r12, Y+8	; 0x08
 c82:	df 80       	ldd	r13, Y+7	; 0x07
 c84:	ee 80       	ldd	r14, Y+6	; 0x06
 c86:	fd 80       	ldd	r15, Y+5	; 0x05
 c88:	0c 81       	ldd	r16, Y+4	; 0x04
 c8a:	1b 81       	ldd	r17, Y+3	; 0x03
 c8c:	aa 81       	ldd	r26, Y+2	; 0x02
 c8e:	b9 81       	ldd	r27, Y+1	; 0x01
 c90:	ce 0f       	add	r28, r30
 c92:	d1 1d       	adc	r29, r1
 c94:	0f b6       	in	r0, 0x3f	; 63
 c96:	f8 94       	cli
 c98:	de bf       	out	0x3e, r29	; 62
 c9a:	0f be       	out	0x3f, r0	; 63
 c9c:	cd bf       	out	0x3d, r28	; 61
 c9e:	ed 01       	movw	r28, r26
 ca0:	08 95       	ret

00000ca2 <_exit>:
 ca2:	f8 94       	cli

00000ca4 <__stop_program>:
 ca4:	ff cf       	rjmp	.-2      	; 0xca4 <__stop_program>
